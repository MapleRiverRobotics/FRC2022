// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants.DriveConstants;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class Drivetrain extends SubsystemBase {

    private CANSparkMax leftMaster;
    private CANSparkMax leftSlave;
    private CANSparkMax rightSlave;
    private CANSparkMax rightMaster;
    private final DifferentialDrive differentialDrive;

    /**
    *
    */
    public Drivetrain() {

        rightMaster = new CANSparkMax(DriveConstants.RightMasterMotorId, MotorType.kBrushless);
        rightMaster.setInverted(true);

        rightSlave = new CANSparkMax(DriveConstants.RightSlaveMototId, MotorType.kBrushless);
        rightSlave.follow(rightMaster);
        rightSlave.setInverted(true);

        leftMaster = new CANSparkMax(DriveConstants.LeftMasterMotorId, MotorType.kBrushless);
        leftMaster.setInverted(false);

        leftSlave = new CANSparkMax(DriveConstants.LeftSlaveMotorId, MotorType.kBrushless);
        leftSlave.follow(leftMaster);
        leftSlave.setInverted(false);

        differentialDrive = new DifferentialDrive(leftMaster, rightMaster);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void arcadeDrive(final double speed, final double rotation) {
        differentialDrive.arcadeDrive(speed, -rotation);
    }

    public void stop() {
        differentialDrive.arcadeDrive(0, 0);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
