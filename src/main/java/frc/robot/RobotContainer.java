// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.OIConstants;
import frc.robot.Constants.ClimberConstants.Arm;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();
  public static OI oi = new OI();
  private final Drivetrain m_drivetrain = new Drivetrain();
  private final Shooter m_shooter = new Shooter();
  private final Climber m_climber = new Climber();
  private final Intake m_intake = new Intake();
  private final Indexer m_indexer = new Indexer();


  // A simple auto routine that drives forward a specified distance, and then stops.
  private final Command m_autoDriveForward = new AutonomousDriveCommand(m_drivetrain, 1);
  private final Command m_autoDriveReverse = new AutonomousDriveCommand(m_drivetrain, -1);
  private final Command m_autoShootAndBackup = new SequentialCommandGroup(
    new Shoot(m_shooter, 40),
    new AutonomousDriveCommand(m_drivetrain, -1)
  );

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();


  
  public Drivetrain getDriveTrain() {
    return m_drivetrain;
  };
  public Shooter getShooter() {
    return null; //m_shooter;   //TODO - Restore this line of code
  };

  // Joysticks
  private final Joystick driveJoystick = new Joystick(OIConstants.DriverJoystickId);
  private final XboxController operatorJoystick = new XboxController(OIConstants.OperatorJoystickId);

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {

    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);

    // SmartDashboard Buttons
    // Add commands to the autonomous command chooser
    m_chooser.setDefaultOption("Auto Drive Forward", m_autoDriveForward);
    m_chooser.addOption("Auto Drive Reverse", m_autoDriveReverse);
    m_chooser.addOption("Shoot and then leave tarmac", m_autoShootAndBackup);

    // Put the chooser on the dashboard
    SmartDashboard.putData(m_chooser);

    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_drivetrain.setDefaultCommand(new Drive(m_drivetrain));
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // Create Shooter buttons
    final JoystickButton shooterShootButtonOne = new JoystickButton(driveJoystick, 1);
    shooterShootButtonOne.whileHeld(new Shoot(m_shooter, 75));
    final JoystickButton shooterShootButtonTwo = new JoystickButton(driveJoystick, 12);
    shooterShootButtonTwo.whileActiveContinuous(new Shoot(m_shooter, 60));
    final JoystickButton shooterShootButtonThree = new JoystickButton(driveJoystick, 11);
    shooterShootButtonThree.whileActiveContinuous(new Shoot(m_shooter, 40));

    // Intake Triggers
    Trigger intakeForward = new Trigger(() -> operatorJoystick.getPOV() > 315 || (operatorJoystick.getPOV() >= 0 && operatorJoystick.getPOV() < 45) );
    Trigger intakeReverse = new Trigger(() -> operatorJoystick.getPOV() > 135 && operatorJoystick.getPOV() < 215);
    intakeForward.whileActiveContinuous(new IntakeRun(m_intake, -1));
    intakeReverse.whileActiveContinuous(new IntakeRun(m_intake, 1));

    final JoystickButton intakeUpButton = new JoystickButton(operatorJoystick, Constants.IntakeConstants.IntakeUpButton);
    intakeUpButton.whenPressed(new IntakeLift(m_intake, 1));
    final JoystickButton intakeDownButton = new JoystickButton(operatorJoystick, Constants.IntakeConstants.IntakeDownButton);
    intakeDownButton.whenPressed(new IntakeLift(m_intake, 0));

    // Indexer Triggers
    Trigger indexerForward = new Trigger (() -> operatorJoystick.getPOV() >= 45 && operatorJoystick.getPOV() < 135) ;
    Trigger indexerReverse = new Trigger(() -> operatorJoystick.getPOV() > 225 && operatorJoystick.getPOV() < 315);
    indexerForward.whileActiveContinuous(new IndexRun(m_indexer, 1));
    indexerReverse.whileActiveContinuous(new IndexRun(m_indexer, -1));

    // Climber Rotation Triggers
    Trigger leftTrigger = new Trigger(() -> operatorJoystick.getLeftTriggerAxis() > 0);
    Trigger rightTrigger = new Trigger(() -> operatorJoystick.getRightTriggerAxis() > 0);
    Trigger leftBumper = new Trigger(() -> operatorJoystick.getLeftBumper());
    Trigger rightBumper = new Trigger(() -> operatorJoystick.getRightBumper());

    leftTrigger.and(rightTrigger).whileActiveContinuous(new Rotate(m_climber, Arm.Both, 1));
    leftTrigger.negate().and(rightTrigger).whileActiveContinuous(new Rotate(m_climber, Arm.Right, 1));
    rightTrigger.negate().and(leftTrigger).whileActiveContinuous(new Rotate(m_climber, Arm.Left, 1));

    leftBumper.and(rightBumper).whileActiveContinuous(new Rotate(m_climber, Arm.Both, -1));
    leftBumper.negate().and(rightBumper).whileActiveContinuous(new Rotate(m_climber, Arm.Right, -1));
    rightBumper.negate().and(leftBumper).whileActiveContinuous(new Rotate(m_climber, Arm.Left, -1));

    // Climber Pneumatic Buttons
    final JoystickButton releaseButton = new JoystickButton(operatorJoystick, 9);
    final JoystickButton grab1Button = new JoystickButton(operatorJoystick, 3);
    final JoystickButton grab2Button = new JoystickButton(operatorJoystick, 4);
    final JoystickButton grab3Button = new JoystickButton(operatorJoystick, 2);

    //Grab
    releaseButton.negate().and(grab1Button).whileActiveOnce(new Grab(m_climber, 1));
    releaseButton.negate().and(grab2Button).whileActiveOnce(new Grab(m_climber, 2));
    releaseButton.negate().and(grab3Button).whileActiveOnce(new Grab(m_climber, 3));

    // Release
    releaseButton.and(grab1Button).whileActiveOnce(new Release(m_climber, 1));
    releaseButton.and(grab2Button).whileActiveOnce(new Release(m_climber, 2));
    releaseButton.and(grab3Button).whileActiveOnce(new Release(m_climber, 3)); 

  }

  public Joystick getDriveJoystick() {
    return driveJoystick;
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
