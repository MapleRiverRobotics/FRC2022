// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.OIConstants;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();
  public static OI oi = new OI();
  private final Drivetrain m_drivetrain = new Drivetrain();
  private final Shooter m_shooter = new Shooter();
  private final Climber m_climber = new Climber();

  public Shooter getShooter() {
    return m_shooter;
  };

  // Joysticks
  private final Joystick driveJoystick = new Joystick(OIConstants.DriverJoystickId);
  private final XboxController operatorJoystick = new XboxController(OIConstants.OperatorJoystickId);

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {

    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);

    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Drive", new Drive(m_drivetrain));

    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_drivetrain.setDefaultCommand(new Drive(m_drivetrain));

    // Configure autonomous sendable chooser
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // Create some buttons
    // final JoystickButton shooterShootButton = new JoystickButton(driveJoystick, 1);
    // shooterShootButton.whileHeld(new Shoot(m_shooter));


    final JoystickButton releaseButton = new JoystickButton(operatorJoystick, 9);
    final JoystickButton grab1Button = new JoystickButton(operatorJoystick, 3);
    final JoystickButton grab2Button = new JoystickButton(operatorJoystick, 4);
    final JoystickButton grab3Button = new JoystickButton(operatorJoystick, 2);

    //Grab
    releaseButton.negate().and(grab1Button).whileActiveOnce(new Grab(m_climber, 1));
    releaseButton.negate().and(grab2Button).whileActiveOnce(new Grab(m_climber, 2));
    releaseButton.negate().and(grab3Button).whileActiveOnce(new Grab(m_climber, 3));

    // Release
    releaseButton.and(grab1Button).whileActiveOnce(new Release(m_climber, 1));
    releaseButton.and(grab2Button).whileActiveOnce(new Release(m_climber, 2));
    releaseButton.and(grab3Button).whileActiveOnce(new Release(m_climber, 3));

  }

  public Joystick getDriveJoystick() {
    return driveJoystick;
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
